// <auto-generated />
using System;
using System.Collections.Generic;
using BeautySalon.Booking.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeautySalon.Booking.Persistence.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250607075803_newSchema")]
    partial class newSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.ClientReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BerthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SurnName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.EmployeeAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.EmployeeReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.PrimitiveCollection<List<Guid>>("ServiceIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.ScheduleReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeReadModelId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeReadModelId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.ServiceReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Booking.Domain.AggregatesModel.BookingAggregate.BookStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("BeautySalon.Domain.AggregatesModel.BookingAggregate.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.EmployeeAvailability", b =>
                {
                    b.HasOne("BeautySalon.Booking.Application.Models.EmployeeReadModel", "Employee")
                        .WithMany("Availabilities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.ScheduleReadModel", b =>
                {
                    b.HasOne("BeautySalon.Booking.Application.Models.EmployeeReadModel", null)
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeReadModelId");
                });

            modelBuilder.Entity("BeautySalon.Domain.AggregatesModel.BookingAggregate.Book", b =>
                {
                    b.OwnsOne("BeautySalon.Domain.AggregatesModel.BookingAggregate.BookingTime", "Time", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("BookId");

                            b1.ToTable("Booking");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("Time")
                        .IsRequired();
                });

            modelBuilder.Entity("BeautySalon.Booking.Application.Models.EmployeeReadModel", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
